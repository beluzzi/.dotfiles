#!/bin/bash

RED="\e[48;5;124m"    # Darker red background
GREEN="\e[48;5;28m"   # Dark green background
PURPLE="\e[48;5;93m"  # Purple background
WHITE="\e[97m"        # White text
ENDCOLOR="\e[0m"      # Reset color

# Check if a commit message is provided
if [ $# -eq 0 ]; then
	echo -e "${RED}${WHITE}Error: no commit message provided${ENDCOLOR}"
    exit 1
fi

# Fetch the latest changes from the remote without pulling
git fetch origin

# Group variables together
current_branch=$(git rev-parse --abbrev-ref HEAD)
local_changes=$(git status --porcelain)
local_commits=$(git rev-parse HEAD)
remote_commits=$(git rev-parse origin/$current_branch)
git_status=$(git status -uno)

# Check for local changes
if [ -z "$local_changes" ]; then
    echo -e "${PURPLE}${WHITE}No local changes to commit${ENDCOLOR}"
    exit 1
fi

# Check if local is behind remote
if [[ "$git_status" == *"Your branch is behind"* ]]; then
    echo -e "${PURPLE}${WHITE}Local repository is behind remote branch '$current_branch'${ENDCOLOR}"
    
    # Notify about fast-forward merge attempt
    echo -e "${PURPLE}${WHITE}Attempting fast-forward merge${ENDCOLOR}"
    
    # Attempt fast-forward merge only
    git merge --ff-only origin/$current_branch
    
    # Check merge result
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}${WHITE}Fast-forward merge successful${ENDCOLOR}"
    else
        echo -e "${RED}${WHITE}Fast-forward merge not possible. Manual intervention required.${ENDCOLOR}"
        exit 1
    fi
fi

# Indicate commit is clear to go ahead
echo -e "${GREEN}${WHITE}Committing changes to '$current_branch'${ENDCOLOR}"

# Add all changes and commit
git add .
git commit -m "$*"

# Push changes
git push

# Check if push was successful
if [ $? -eq 0 ]; then
    echo -e "${GREEN}${WHITE}Successfully committed and pushed changes to '$current_branch'${ENDCOLOR}"
else
    echo -e "${RED}${WHITE}Error: Push failed${ENDCOLOR}"
    exit 3
fi
