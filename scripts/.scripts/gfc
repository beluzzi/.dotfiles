#!/bin/bash

RED="\e[48;5;124m"    # Darker red background
GREEN="\e[48;5;28m"   # Dark green background
PURPLE="\e[48;5;93m"  # Purple background
WHITE="\e[97m"        # White text
ENDCOLOR="\e[0m"      # Reset color

# Check if a commit message is provided
if [ $# -eq 0 ]; then
	echo -e "${RED}${WHITE}Error: no commit message provided${ENDCOLOR}"
    exit 1
fi

# Fetch the latest changes from the remote without pulling
git fetch origin

# Get current branch name
current_branch=$(git rev-parse --abbrev-ref HEAD)

# Check for local changes
local_changes=$(git status --porcelain)
if [ -z "$local_changes" ]; then
    echo "No local changes to commit"
    exit 1
fi

# Resolve local and remote commit hashes
local_commits=$(git rev-parse HEAD)
remote_commits=$(git rev-parse origin/$current_branch)

# Additional status check for more comprehensive sync assessment
git_status=$(git status -uno)

# Compare commit hashes
if [ "$local_commits" != "$remote_commits" ]; then
    # Check if local is behind or ahead based on hash comparison
    if [[ "$git_status" == *"Your branch is behind"* ]]; then
        echo -e "${PURPLE}${WHITE}Local repository is behind remote branch '$current_branch'${ENDCOLOR}"
        echo -e "${PURPLE}${WHITE}Merging remote changes...${ENDCOLOR}"
        git merge origin/$current_branch
    elif [[ "$git_status" == *"Your branch is ahead"* ]]; then
        # Count unpushed commits
        unpushed_commits=$(git cherry -v | wc -l)
        if [ "$unpushed_commits" -gt 0 ]; then
            echo -e "${PURPLE}${WHITE}Local repository has $unpushed_commits unpushed commits$ENDCOLOR}"
            echo -e "${PURPLE}${WHITE}Please resolve existing unpushed commits first${ENDCOLOR}"
            exit 2
        fi

        echo -e "${GREEN}${WHITE}Local repository is ahead of remote branch '$current_branch'${ENDCOLOR}"
        echo -e "${GREEN}${WHITE}Proceeding with push...${ENDCOLOR}"
    else
        # Hash mismatch with no clear ahead/behind status
        echo -e "${RED}${WHITE}Potential sync conflict detected on branch '$current_branch'${ENDCOLOR}"
        exit 1
    fi
fi

# If everything is in sync, proceed with commit and push
git add .
git commit -m "$*"
git push

# Check if push was successful
if [ $? -eq 0 ]; then
    echo -e "${GREEN}${WHITE}Successfully committed and pushed changes to '$current_branch'${ENDCOLOR}"
else
    echo -e "${RED}${WHITE}Error: Push failed${ENDCOLOR}"
    exit 3
fi
